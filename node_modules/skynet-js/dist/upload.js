"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadFile = uploadFile;
exports.uploadFileRequest = uploadFileRequest;
exports.uploadDirectory = uploadDirectory;
exports.uploadDirectoryRequest = uploadDirectoryRequest;

var _file = require("./utils/file");

var _skylink = require("./utils/skylink");

const defaultUploadOptions = { ...(0, _skylink.defaultOptions)("/skynet/skyfile"),
  portalFileFieldname: "file",
  portalDirectoryFileFieldname: "files[]",
  customFilename: ""
};
/**
 * Uploads a file to Skynet.
 *
 * @param this - SkynetClient
 * @param file - The file to upload.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/skynet/skyfile"] - The relative URL path of the portal endpoint to contact.
 * @returns - The returned skylink.
 * @throws - Will throw if the request is successful but the upload response does not contain a complete response.
 */

async function uploadFile(file, customOptions) {
  const response = await this.uploadFileRequest(file, customOptions);

  if (typeof response.data.skylink !== "string" || typeof response.data.merkleroot !== "string" || typeof response.data.bitfield !== "number") {
    throw new Error("Did not get a complete upload response despite a successful request. Please try again and report this issue to the devs if it persists.");
  }

  const skylink = (0, _skylink.formatSkylink)(response.data.skylink);
  const merkleroot = response.data.merkleroot;
  const bitfield = response.data.bitfield;
  return {
    skylink,
    merkleroot,
    bitfield
  };
}
/**
 * Makes a request to upload a file to Skynet.
 *
 * @param this - SkynetClient
 * @param file - The file to upload.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/skynet/skyfile"] - The relative URL path of the portal endpoint to contact.
 * @returns - The upload response.
 */


async function uploadFileRequest(file, customOptions) {
  const opts = { ...defaultUploadOptions,
    ...this.customOptions,
    ...customOptions
  };
  const formData = new FormData();
  file = ensureFileObjectConsistency(file);

  if (opts.customFilename) {
    formData.append(opts.portalFileFieldname, file, opts.customFilename);
  } else {
    formData.append(opts.portalFileFieldname, file);
  }

  const response = await this.executeRequest({ ...opts,
    method: "post",
    data: formData
  });
  return response;
}
/**
 * Uploads a directory to Skynet.
 *
 * @param this - SkynetClient
 * @param directory - File objects to upload, indexed by their path strings.
 * @param filename - The name of the directory.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/skynet/skyfile"] - The relative URL path of the portal endpoint to contact.
 * @returns - The returned skylink.
 * @throws - Will throw if the request is successful but the upload response does not contain a complete response.
 */


async function uploadDirectory(directory, filename, customOptions) {
  const response = await this.uploadDirectoryRequest(directory, filename, customOptions);

  if (typeof response.data.skylink !== "string" || typeof response.data.merkleroot !== "string" || typeof response.data.bitfield !== "number") {
    throw new Error("Did not get a complete upload response despite a successful request. Please try again and report this issue to the devs if it persists.");
  }

  const skylink = (0, _skylink.formatSkylink)(response.data.skylink);
  const merkleroot = response.data.merkleroot;
  const bitfield = response.data.bitfield;
  return {
    skylink,
    merkleroot,
    bitfield
  };
}
/**
 * Makes a request to upload a directory to Skynet.
 *
 * @param this - SkynetClient
 * @param directory - File objects to upload, indexed by their path strings.
 * @param filename - The name of the directory.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/skynet/skyfile"] - The relative URL path of the portal endpoint to contact.
 * @returns - The upload response.
 * @throws - Will throw if the input filename is not a string.
 */


async function uploadDirectoryRequest(directory, filename, customOptions) {
  /* istanbul ignore next */
  if (typeof filename !== "string") {
    throw new Error("Expected parameter filename to be type string, was type ".concat(typeof filename));
  }

  const opts = { ...defaultUploadOptions,
    ...this.customOptions,
    ...customOptions
  };
  const formData = new FormData();
  Object.entries(directory).forEach(([path, file]) => {
    file = ensureFileObjectConsistency(file);
    formData.append(opts.portalDirectoryFileFieldname, file, path);
  });
  const response = await this.executeRequest({ ...opts,
    method: "post",
    data: formData,
    query: {
      filename
    }
  });
  return response;
}
/**
 * Sometimes file object might have had the type property defined manually with
 * Object.defineProperty and some browsers (namely firefox) can have problems
 * reading it after the file has been appended to form data. To overcome this,
 * we recreate the file object using native File constructor with a type defined
 * as a constructor argument.
 *
 * @param file - The input file.
 * @returns - The processed file.
 * @see {@link https://github.com/NebulousLabs/skynet-webportal/issues/290| Related Issue}
 */


function ensureFileObjectConsistency(file) {
  return new File([file], file.name, {
    type: (0, _file.getFileMimeType)(file)
  });
}