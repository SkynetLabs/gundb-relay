"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SkynetClient = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _axios = _interopRequireDefault(require("axios"));

var _upload = require("./upload");

var _download = require("./download");

var _skydb = require("./skydb");

var _registry = require("./registry");

var _url = require("./utils/url");

/**
 * The Skynet Client which can be used to access Skynet.
 */
class SkynetClient {
  // TODO: This is currently the url of the skapp and not the portal. It should be the value of 'skynet-portal-api' header. This will be a promise, which will be a breaking change.
  // Set methods (defined in other files).
  // Upload
  // Download
  // SkyDB
  // SkyDB helpers

  /**
   * The Skynet Client which can be used to access Skynet.
   *
   * @class
   * @param [portalUrl] The portal URL to use to access Skynet, if specified. To use the default portal while passing custom options, use ""
   * @param [customOptions] Configuration for the client.
   */
  constructor(portalUrl = (0, _url.defaultPortalUrl)(), customOptions = {}) {
    (0, _defineProperty2.default)(this, "portalUrl", void 0);
    (0, _defineProperty2.default)(this, "customOptions", void 0);
    (0, _defineProperty2.default)(this, "uploadFile", _upload.uploadFile);
    (0, _defineProperty2.default)(this, "uploadFileRequest", _upload.uploadFileRequest);
    (0, _defineProperty2.default)(this, "uploadDirectory", _upload.uploadDirectory);
    (0, _defineProperty2.default)(this, "uploadDirectoryRequest", _upload.uploadDirectoryRequest);
    (0, _defineProperty2.default)(this, "downloadFile", _download.downloadFile);
    (0, _defineProperty2.default)(this, "downloadFileHns", _download.downloadFileHns);
    (0, _defineProperty2.default)(this, "getSkylinkUrl", _download.getSkylinkUrl);
    (0, _defineProperty2.default)(this, "getHnsUrl", _download.getHnsUrl);
    (0, _defineProperty2.default)(this, "getHnsresUrl", _download.getHnsresUrl);
    (0, _defineProperty2.default)(this, "getMetadata", _download.getMetadata);
    (0, _defineProperty2.default)(this, "getFileContent", _download.getFileContent);
    (0, _defineProperty2.default)(this, "getFileContentHns", _download.getFileContentHns);
    (0, _defineProperty2.default)(this, "getFileContentRequest", _download.getFileContentRequest);
    (0, _defineProperty2.default)(this, "openFile", _download.openFile);
    (0, _defineProperty2.default)(this, "openFileHns", _download.openFileHns);
    (0, _defineProperty2.default)(this, "resolveHns", _download.resolveHns);
    (0, _defineProperty2.default)(this, "db", {
      getJSON: _skydb.getJSON.bind(this),
      setJSON: _skydb.setJSON.bind(this)
    });
    (0, _defineProperty2.default)(this, "registry", {
      getEntry: _registry.getEntry.bind(this),
      getEntryUrl: _registry.getEntryUrl.bind(this),
      setEntry: _registry.setEntry.bind(this)
    });
    this.portalUrl = portalUrl;
    this.customOptions = customOptions;
  }
  /**
   * Creates and executes a request.
   *
   * @param config - Configuration for the request.
   * @returns - The response from axios.
   * @throws - Will throw if unimplemented options have been passed in.
   */


  executeRequest(config) {
    if (config.skykeyName || config.skykeyId) {
      throw new Error("Unimplemented: skykeys have not been implemented in this SDK");
    } // Build the URL.


    let url = config.url;

    if (!url) {
      var _config$extraPath;

      url = (0, _url.makeUrl)(this.portalUrl, config.endpointPath, (_config$extraPath = config.extraPath) !== null && _config$extraPath !== void 0 ? _config$extraPath : "");
    }

    if (config.query) {
      url = (0, _url.addUrlQuery)(url, config.query);
    } // Build headers.


    const headers = { ...config.headers
    };

    if (config.customUserAgent) {
      headers["User-Agent"] = config.customUserAgent;
    }

    const auth = config.APIKey ? {
      username: "",
      password: config.APIKey
    } : undefined;
    /* istanbul ignore next */

    const onUploadProgress = config.onUploadProgress && function (event) {
      const progress = event.loaded / event.total; // Need the if-statement or TS complains.

      if (config.onUploadProgress) config.onUploadProgress(progress, event);
    };

    return (0, _axios.default)({
      url,
      method: config.method,
      data: config.data,
      headers,
      auth,
      onUploadProgress,
      transformRequest: config.transformRequest,
      transformResponse: config.transformResponse,
      maxContentLength: Infinity,
      maxBodyLength: Infinity
    });
  }

}

exports.SkynetClient = SkynetClient;