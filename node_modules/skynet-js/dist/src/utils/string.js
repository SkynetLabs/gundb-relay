"use strict";
exports.__esModule = true;
exports.toHexString = exports.isHexString = exports.hexToUint8Array = exports.stringToUint8Array = exports.trimUriPrefix = exports.trimSuffix = exports.trimPrefix = exports.trimForwardSlash = void 0;
/**
 * Removes a prefix from the beginning of the string.
 *
 * @param str - The string to process.
 * @returns - The processed string.
 */
function trimForwardSlash(str) {
    return trimPrefix(trimSuffix(str, "/"), "/");
}
exports.trimForwardSlash = trimForwardSlash;
/**
 * Removes a prefix from the beginning of the string.
 *
 * @param str - The string to process.
 * @param prefix - The prefix to remove.
 * @returns - The processed string.
 */
function trimPrefix(str, prefix) {
    while (str.startsWith(prefix)) {
        str = str.slice(prefix.length);
    }
    return str;
}
exports.trimPrefix = trimPrefix;
/**
 * Removes a suffix from the end of the string.
 *
 * @param str - The string to process.
 * @param suffix - The suffix to remove.
 * @returns - The processed string.
 */
function trimSuffix(str, suffix) {
    while (str.endsWith(suffix)) {
        str = str.substring(0, str.length - suffix.length);
    }
    return str;
}
exports.trimSuffix = trimSuffix;
/**
 * Removes a URI prefix from the beginning of the string.
 *
 * @param str - The string to process.
 * @param prefix - The prefix to remove.
 * @returns - The processed string.
 */
function trimUriPrefix(str, prefix) {
    var longPrefix = prefix + "//";
    if (str.startsWith(longPrefix)) {
        // longPrefix is exactly at the beginning
        return str.slice(longPrefix.length);
    }
    if (str.startsWith(prefix)) {
        // else prefix is exactly at the beginning
        return str.slice(prefix.length);
    }
    return str;
}
exports.trimUriPrefix = trimUriPrefix;
/**
 * Converts a string to a uint8 array.
 *
 * @param str - The string to convert.
 * @returns - The uint8 array.
 * @throws - Will throw if the input is not a string.
 */
function stringToUint8Array(str) {
    /* istanbul ignore next */
    if (typeof str !== "string") {
        throw new Error("Expected parameter str to be type string, was type " + typeof str);
    }
    return Uint8Array.from(Buffer.from(str));
}
exports.stringToUint8Array = stringToUint8Array;
/**
 * Converts a hex encoded string to a uint8 array.
 *
 * @param str - The string to convert.
 * @returns - The uint8 array.
 * @throws - Will throw if the input is not a valid hex-encoded string or is an empty string.
 */
function hexToUint8Array(str) {
    if (!isHexString(str)) {
        throw new Error("Input string '" + str + "' is not a valid hex-encoded string");
    }
    var matches = str.match(/.{1,2}/g);
    if (matches === null) {
        throw new Error("Input string '" + str + "' is not a valid hex-encoded string");
    }
    return new Uint8Array(matches.map(function (byte) { return parseInt(byte, 16); }));
}
exports.hexToUint8Array = hexToUint8Array;
/**
 * Returns true if the input is a valid hex-encoded string.
 *
 * @param str - The input string.
 * @returns - True if the input is hex-encoded.
 * @throws - Will throw if the input is not a string.
 */
function isHexString(str) {
    /* istanbul ignore next */
    if (typeof str !== "string") {
        throw new Error("Expected parameter str to be type string, was type " + typeof str);
    }
    return /^[0-9A-Fa-f]*$/g.test(str);
}
exports.isHexString = isHexString;
/**
 * Convert a byte array to a hex string.
 *
 * @param byteArray - The byte array to convert.
 * @returns - The hex string.
 * @see {@link https://stackoverflow.com/a/44608819|Stack Overflow}
 */
function toHexString(byteArray) {
    var s = "";
    byteArray.forEach(function (byte) {
        s += ("0" + (byte & 0xff).toString(16)).slice(-2);
    });
    return s;
}
exports.toHexString = toHexString;
