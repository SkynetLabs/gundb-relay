"use strict";
exports.__esModule = true;
var skylink_1 = require("./skylink");
var string_1 = require("./string");
var hnsLink = "doesn";
var hnsresLink = "doesn";
expect.extend({
    // source https://stackoverflow.com/a/60818105/6085242
    toEqualUint8Array: function (received, argument) {
        if (received.length !== argument.length) {
            return { pass: false, message: function () { return "expected " + received + " to equal " + argument; } };
        }
        for (var i = 0; i < received.length; i++) {
            if (received[i] !== argument[i]) {
                return { pass: false, message: function () { return "expected " + received + " to equal " + argument; } };
            }
        }
        return { pass: true, message: function () { return "expected " + received + " not to equal " + argument; } };
    }
});
describe("hexToUint8Array", function () {
    var hexStrings = [
        ["ff", [255]],
        ["a", [10]],
        ["ff0a", [255, 10]],
    ];
    it.each(hexStrings)("the hex string '%s' should be decoded to %s", function (str, array) {
        var byteArray = string_1.hexToUint8Array(str);
        expect(byteArray).toEqualUint8Array(new Uint8Array(array));
    });
    var invalidHexStrings = ["xyz", "aabbzz", ""];
    it.each(invalidHexStrings)("should throw on invalid input '%s'", function (str) {
        expect(function () { return string_1.hexToUint8Array(str); }).toThrowError("Input string '" + str + "' is not a valid hex-encoded string");
    });
});
describe("trimUriPrefix", function () {
    it("should correctly parse hns prefixed link", function () {
        var validHnsLinkVariations = [hnsLink, "hns:" + hnsLink, "hns://" + hnsLink];
        var validHnsresLinkVariations = [hnsresLink, "hnsres:" + hnsresLink, "hnsres://" + hnsresLink];
        validHnsLinkVariations.forEach(function (input) {
            expect(string_1.trimUriPrefix(input, skylink_1.uriHandshakePrefix)).toEqual(hnsLink);
        });
        validHnsresLinkVariations.forEach(function (input) {
            expect(string_1.trimUriPrefix(input, skylink_1.uriHandshakeResolverPrefix)).toEqual(hnsresLink);
        });
    });
});
