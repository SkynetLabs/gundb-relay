"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.getFileMimeType = exports.getRootDirectory = exports.getRelativeFilePath = void 0;
var lite_1 = __importDefault(require("mime/lite"));
var path_browserify_1 = __importDefault(require("path-browserify"));
var string_1 = require("./string");
/**
 * Gets the path for the file.
 *
 * @param file - The file.
 * @returns - The path.
 */
function getFilePath(file) {
    /* istanbul ignore next */
    return file.webkitRelativePath || file.path || file.name;
}
/**
 * Gets the file path relative to the root directory of the path, e.g. `bar` in `/foo/bar`.
 *
 * @param file - The input file.
 * @returns - The relative file path.
 */
function getRelativeFilePath(file) {
    var filePath = getFilePath(file);
    var _a = path_browserify_1["default"].parse(filePath), root = _a.root, dir = _a.dir, base = _a.base;
    var relative = path_browserify_1["default"].normalize(dir).slice(root.length).split(path_browserify_1["default"].sep).slice(1);
    return path_browserify_1["default"].join.apply(path_browserify_1["default"], __spreadArray(__spreadArray([], relative), [base]));
}
exports.getRelativeFilePath = getRelativeFilePath;
/**
 * Gets the root directory of the file path, e.g. `foo` in `/foo/bar`.
 *
 * @param file - The input file.
 * @returns - The root directory.
 */
function getRootDirectory(file) {
    var filePath = getFilePath(file);
    var _a = path_browserify_1["default"].parse(filePath), root = _a.root, dir = _a.dir;
    return path_browserify_1["default"].normalize(dir).slice(root.length).split(path_browserify_1["default"].sep)[0];
}
exports.getRootDirectory = getRootDirectory;
/**
 * Get the file mime type. In case the type is not provided, use mime-db and try
 * to guess the file type based on the extension.
 *
 * @param file - The file.
 * @returns - The mime type.
 */
function getFileMimeType(file) {
    if (file.type)
        return file.type;
    var ext = path_browserify_1["default"].parse(file.name).ext;
    ext = string_1.trimPrefix(ext, ".");
    if (ext !== "") {
        var mimeType = lite_1["default"].getType(ext);
        if (mimeType) {
            return mimeType;
        }
    }
    return "";
}
exports.getFileMimeType = getFileMimeType;
