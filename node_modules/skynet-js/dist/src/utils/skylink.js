"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.parseSkylinkBase32 = exports.parseSkylink = exports.formatSkylink = exports.defaultOptions = exports.convertSkylinkToBase32 = exports.uriSkynetPrefix = exports.uriHandshakeResolverPrefix = exports.uriHandshakePrefix = void 0;
var base64_js_1 = __importDefault(require("base64-js"));
var base32_encode_1 = __importDefault(require("base32-encode"));
var url_parse_1 = __importDefault(require("url-parse"));
var string_1 = require("./string");
exports.uriHandshakePrefix = "hns:";
exports.uriHandshakeResolverPrefix = "hnsres:";
exports.uriSkynetPrefix = "sia:";
/**
 * Converts the given base64 skylink to base32.
 *
 * @param skylink - The base64 skylink.
 * @returns - The converted base32 skylink.
 */
function convertSkylinkToBase32(skylink) {
    var decoded = base64_js_1["default"].toByteArray(skylink.padEnd(skylink.length + 4 - (skylink.length % 4), "="));
    return base32_encode_1["default"](decoded, "RFC4648-HEX", { padding: false }).toLowerCase();
}
exports.convertSkylinkToBase32 = convertSkylinkToBase32;
/**
 * Returns the default base custom options for the given endpoint path.
 *
 * @param endpointPath - The endpoint path.
 * @returns - The base custom options.
 */
function defaultOptions(endpointPath) {
    return {
        endpointPath: endpointPath,
        APIKey: "",
        customUserAgent: ""
    };
}
exports.defaultOptions = defaultOptions;
/**
 * Formats the skylink by adding the sia: prefix.
 *
 * @param skylink - The skylink.
 * @returns - The formatted skylink.
 */
function formatSkylink(skylink) {
    if (skylink == "") {
        return skylink;
    }
    if (!skylink.startsWith(exports.uriSkynetPrefix)) {
        skylink = "" + exports.uriSkynetPrefix + skylink;
    }
    return skylink;
}
exports.formatSkylink = formatSkylink;
var SKYLINK_MATCHER = "([a-zA-Z0-9_-]{46})";
var SKYLINK_MATCHER_SUBDOMAIN = "([a-z0-9_-]{55})";
var SKYLINK_DIRECT_REGEX = new RegExp("^" + SKYLINK_MATCHER + "$");
var SKYLINK_PATHNAME_REGEX = new RegExp("^/?" + SKYLINK_MATCHER + "((/.*)?)$");
var SKYLINK_SUBDOMAIN_REGEX = new RegExp("^" + SKYLINK_MATCHER_SUBDOMAIN + "(\\..*)?$");
var SKYLINK_DIRECT_MATCH_POSITION = 1;
var SKYLINK_PATH_MATCH_POSITION = 2;
/**
 * Parses the given string for a base64 skylink, or base32 if opts.fromSubdomain is given. If the given string is prefixed with sia:, sia://, or a portal URL, those will be removed and the raw skylink returned.
 *
 * @param skylinkUrl - Plain skylink, skylink with URI prefix, or URL with skylink as the first path element.
 * @param [opts] - Additional settings that can optionally be set.
 * @returns - The base64 (or base32) skylink, optionally with the path included.
 * @throws - Will throw on invalid combination of options.
 */
function parseSkylink(skylinkUrl, opts) {
    if (opts === void 0) { opts = {}; }
    if (typeof skylinkUrl !== "string")
        throw new Error("Skylink has to be a string, " + typeof skylinkUrl + " provided");
    if (opts.includePath && opts.onlyPath) {
        throw new Error("The includePath and onlyPath options cannot both be set");
    }
    if (opts.includePath && opts.fromSubdomain) {
        throw new Error("The includePath and fromSubdomain options cannot both be set");
    }
    if (opts.fromSubdomain) {
        return parseSkylinkBase32(skylinkUrl, opts);
    }
    // Check for skylink prefixed with sia: or sia:// and extract it.
    // Example: sia:XABvi7JtJbQSMAcDwnUnmp2FKDPjg8_tTTFP4BwMSxVdEg
    // Example: sia://XABvi7JtJbQSMAcDwnUnmp2FKDPjg8_tTTFP4BwMSxVdEg
    skylinkUrl = string_1.trimUriPrefix(skylinkUrl, exports.uriSkynetPrefix);
    // Check for direct base64 skylink match.
    var matchDirect = skylinkUrl.match(SKYLINK_DIRECT_REGEX);
    if (matchDirect) {
        if (opts.onlyPath) {
            return "";
        }
        return matchDirect[SKYLINK_DIRECT_MATCH_POSITION];
    }
    // Check for skylink passed in an url and extract it.
    // Example: https://siasky.net/XABvi7JtJbQSMAcDwnUnmp2FKDPjg8_tTTFP4BwMSxVdEg
    // Example: https://bg06v2tidkir84hg0s1s4t97jaeoaa1jse1svrad657u070c9calq4g.siasky.net (if opts.fromSubdomain = true)
    // Pass empty object as second param to disable using location as base url
    // when parsing in browser.
    var parsed = url_parse_1["default"](skylinkUrl, {});
    var skylinkAndPath = string_1.trimSuffix(parsed.pathname, "/");
    var matchPathname = skylinkAndPath.match(SKYLINK_PATHNAME_REGEX);
    if (!matchPathname)
        return null;
    var path = matchPathname[SKYLINK_PATH_MATCH_POSITION];
    if (opts.includePath)
        return string_1.trimForwardSlash(skylinkAndPath);
    else if (opts.onlyPath)
        return path;
    else
        return matchPathname[SKYLINK_DIRECT_MATCH_POSITION];
}
exports.parseSkylink = parseSkylink;
/**
 * Parses the given string for a base32 skylink.
 *
 * @param skylinkUrl - Base32 skylink.
 * @param [opts] - Additional settings that can optionally be set.
 * @returns - The base32 skylink.
 */
function parseSkylinkBase32(skylinkUrl, opts) {
    if (opts === void 0) { opts = {}; }
    // Pass empty object as second param to disable using location as base url
    // when parsing in browser.
    var parsed = url_parse_1["default"](skylinkUrl, {});
    // Check if the hostname contains a skylink subdomain.
    var matchHostname = parsed.hostname.match(SKYLINK_SUBDOMAIN_REGEX);
    if (matchHostname) {
        if (opts.onlyPath) {
            return string_1.trimSuffix(parsed.pathname, "/");
        }
        return matchHostname[SKYLINK_DIRECT_MATCH_POSITION];
    }
    return null;
}
exports.parseSkylinkBase32 = parseSkylinkBase32;
