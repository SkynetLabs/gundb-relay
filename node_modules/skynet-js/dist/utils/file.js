"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRelativeFilePath = getRelativeFilePath;
exports.getRootDirectory = getRootDirectory;
exports.getFileMimeType = getFileMimeType;

var _lite = _interopRequireDefault(require("mime/lite"));

var _pathBrowserify = _interopRequireDefault(require("path-browserify"));

var _string = require("./string");

/**
 * Gets the path for the file.
 *
 * @param file - The file.
 * @returns - The path.
 */
function getFilePath(file) {
  /* istanbul ignore next */
  return file.webkitRelativePath || file.path || file.name;
}
/**
 * Gets the file path relative to the root directory of the path, e.g. `bar` in `/foo/bar`.
 *
 * @param file - The input file.
 * @returns - The relative file path.
 */


function getRelativeFilePath(file) {
  const filePath = getFilePath(file);

  const {
    root,
    dir,
    base
  } = _pathBrowserify.default.parse(filePath);

  const relative = _pathBrowserify.default.normalize(dir).slice(root.length).split(_pathBrowserify.default.sep).slice(1);

  return _pathBrowserify.default.join(...relative, base);
}
/**
 * Gets the root directory of the file path, e.g. `foo` in `/foo/bar`.
 *
 * @param file - The input file.
 * @returns - The root directory.
 */


function getRootDirectory(file) {
  const filePath = getFilePath(file);

  const {
    root,
    dir
  } = _pathBrowserify.default.parse(filePath);

  return _pathBrowserify.default.normalize(dir).slice(root.length).split(_pathBrowserify.default.sep)[0];
}
/**
 * Get the file mime type. In case the type is not provided, use mime-db and try
 * to guess the file type based on the extension.
 *
 * @param file - The file.
 * @returns - The mime type.
 */


function getFileMimeType(file) {
  if (file.type) return file.type;

  let {
    ext
  } = _pathBrowserify.default.parse(file.name);

  ext = (0, _string.trimPrefix)(ext, ".");

  if (ext !== "") {
    const mimeType = _lite.default.getType(ext);

    if (mimeType) {
      return mimeType;
    }
  }

  return "";
}