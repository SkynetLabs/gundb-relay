"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.extractNonSkylinkPath = exports.compareFormData = exports.combineStrings = void 0;
var url_parse_1 = __importDefault(require("url-parse"));
var string_1 = require("../src/utils/string");
/**
 * Returns an array of strings of all possible permutations by picking one string out of each of the input string arrays.
 *
 * @param arrays - Array of string arrays.
 * @returns - Array of strings of all possible permutations.
 */
function combineStrings() {
    var arrays = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arrays[_i] = arguments[_i];
    }
    return arrays.reduce(function (acc, array) {
        return acc.map(function (first) { return array.map(function (second) { return first.concat(second); }); }).reduce(function (acc, cases) { return __spreadArray(__spreadArray([], acc), cases); });
    });
}
exports.combineStrings = combineStrings;
/**
 * Compares the provided FormData with the expected array of entries.
 *
 * @param formData - opaque FormData to compare.
 * @param entries - array of expected entries.
 */
function compareFormData(formData, entries) {
    return __awaiter(this, void 0, void 0, function () {
        var i, _loop_1, _i, _a, _b, fieldName, file;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    i = 0;
                    _loop_1 = function (fieldName, file) {
                        var entry, expectedFieldName, expectedData, expectedFilename, reader;
                        return __generator(this, function (_d) {
                            switch (_d.label) {
                                case 0:
                                    entry = entries[i];
                                    expectedFieldName = entry[0];
                                    expectedData = entry[1];
                                    expectedFilename = entry[2];
                                    expect(fieldName).toEqual(expectedFieldName);
                                    // Some systems use ":" as the path delimiter.
                                    expect(file.name == expectedFilename || file.name.replace(":", "/") == expectedFilename);
                                    reader = new FileReader();
                                    reader.onload = function (e) {
                                        var _a;
                                        // Check that the file contents equal expected entry.
                                        expect((_a = e.target) === null || _a === void 0 ? void 0 : _a.result).toEqual(expectedData);
                                    };
                                    reader.readAsText(file);
                                    _d.label = 1;
                                case 1:
                                    if (!(reader.readyState !== 2)) return [3 /*break*/, 3];
                                    // Sleep for 10ms while we wait for the readyState to be DONE.
                                    return [4 /*yield*/, new Promise(function (r) { return setTimeout(r, 10); })];
                                case 2:
                                    // Sleep for 10ms while we wait for the readyState to be DONE.
                                    _d.sent(); // eslint-disable-line
                                    return [3 /*break*/, 1];
                                case 3:
                                    i++;
                                    return [2 /*return*/];
                            }
                        });
                    };
                    _i = 0, _a = formData.entries();
                    _c.label = 1;
                case 1:
                    if (!(_i < _a.length)) return [3 /*break*/, 4];
                    _b = _a[_i], fieldName = _b[0], file = _b[1];
                    return [5 /*yield**/, _loop_1(fieldName, file)];
                case 2:
                    _c.sent();
                    _c.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4:
                    // Check that the formData contains the expected number of entries.
                    expect(i).toEqual(entries.length);
                    return [2 /*return*/];
            }
        });
    });
}
exports.compareFormData = compareFormData;
/**
 * Extracts the non-skylink part of the path from the url.
 *
 * @param url - The input URL.
 * @param skylink - The skylink to remove, if it is present.
 * @returns - The non-skylink part of the path.
 */
function extractNonSkylinkPath(url, skylink) {
    var parsed = url_parse_1["default"](url, {});
    var path = parsed.pathname.replace(skylink, ""); // Remove skylink to get the path.
    path = string_1.trimForwardSlash(path);
    if (path != "") {
        path = "/" + path;
    }
    return path;
}
exports.extractNonSkylinkPath = extractNonSkylinkPath;
