"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertSkylinkToBase32 = convertSkylinkToBase32;
exports.defaultOptions = defaultOptions;
exports.formatSkylink = formatSkylink;
exports.parseSkylink = parseSkylink;
exports.parseSkylinkBase32 = parseSkylinkBase32;
exports.uriSkynetPrefix = exports.uriHandshakeResolverPrefix = exports.uriHandshakePrefix = void 0;

var _base64Js = _interopRequireDefault(require("base64-js"));

var _base32Encode = _interopRequireDefault(require("base32-encode"));

var _urlParse = _interopRequireDefault(require("url-parse"));

var _string = require("./string");

const uriHandshakePrefix = "hns:";
exports.uriHandshakePrefix = uriHandshakePrefix;
const uriHandshakeResolverPrefix = "hnsres:";
exports.uriHandshakeResolverPrefix = uriHandshakeResolverPrefix;
const uriSkynetPrefix = "sia:";
/**
 * Converts the given base64 skylink to base32.
 *
 * @param skylink - The base64 skylink.
 * @returns - The converted base32 skylink.
 */

exports.uriSkynetPrefix = uriSkynetPrefix;

function convertSkylinkToBase32(skylink) {
  const decoded = _base64Js.default.toByteArray(skylink.padEnd(skylink.length + 4 - skylink.length % 4, "="));

  return (0, _base32Encode.default)(decoded, "RFC4648-HEX", {
    padding: false
  }).toLowerCase();
}
/**
 * Returns the default base custom options for the given endpoint path.
 *
 * @param endpointPath - The endpoint path.
 * @returns - The base custom options.
 */


function defaultOptions(endpointPath) {
  return {
    endpointPath,
    APIKey: "",
    customUserAgent: ""
  };
}
/**
 * Formats the skylink by adding the sia: prefix.
 *
 * @param skylink - The skylink.
 * @returns - The formatted skylink.
 */


function formatSkylink(skylink) {
  if (skylink == "") {
    return skylink;
  }

  if (!skylink.startsWith(uriSkynetPrefix)) {
    skylink = "".concat(uriSkynetPrefix).concat(skylink);
  }

  return skylink;
}

const SKYLINK_MATCHER = "([a-zA-Z0-9_-]{46})";
const SKYLINK_MATCHER_SUBDOMAIN = "([a-z0-9_-]{55})";
const SKYLINK_DIRECT_REGEX = new RegExp("^".concat(SKYLINK_MATCHER, "$"));
const SKYLINK_PATHNAME_REGEX = new RegExp("^/?".concat(SKYLINK_MATCHER, "((/.*)?)$"));
const SKYLINK_SUBDOMAIN_REGEX = new RegExp("^".concat(SKYLINK_MATCHER_SUBDOMAIN, "(\\..*)?$"));
const SKYLINK_DIRECT_MATCH_POSITION = 1;
const SKYLINK_PATH_MATCH_POSITION = 2;
/**
 * Parses the given string for a base64 skylink, or base32 if opts.fromSubdomain is given. If the given string is prefixed with sia:, sia://, or a portal URL, those will be removed and the raw skylink returned.
 *
 * @param skylinkUrl - Plain skylink, skylink with URI prefix, or URL with skylink as the first path element.
 * @param [opts] - Additional settings that can optionally be set.
 * @returns - The base64 (or base32) skylink, optionally with the path included.
 * @throws - Will throw on invalid combination of options.
 */

function parseSkylink(skylinkUrl, opts = {}) {
  if (typeof skylinkUrl !== "string") throw new Error("Skylink has to be a string, ".concat(typeof skylinkUrl, " provided"));

  if (opts.includePath && opts.onlyPath) {
    throw new Error("The includePath and onlyPath options cannot both be set");
  }

  if (opts.includePath && opts.fromSubdomain) {
    throw new Error("The includePath and fromSubdomain options cannot both be set");
  }

  if (opts.fromSubdomain) {
    return parseSkylinkBase32(skylinkUrl, opts);
  } // Check for skylink prefixed with sia: or sia:// and extract it.
  // Example: sia:XABvi7JtJbQSMAcDwnUnmp2FKDPjg8_tTTFP4BwMSxVdEg
  // Example: sia://XABvi7JtJbQSMAcDwnUnmp2FKDPjg8_tTTFP4BwMSxVdEg


  skylinkUrl = (0, _string.trimUriPrefix)(skylinkUrl, uriSkynetPrefix); // Check for direct base64 skylink match.

  const matchDirect = skylinkUrl.match(SKYLINK_DIRECT_REGEX);

  if (matchDirect) {
    if (opts.onlyPath) {
      return "";
    }

    return matchDirect[SKYLINK_DIRECT_MATCH_POSITION];
  } // Check for skylink passed in an url and extract it.
  // Example: https://siasky.net/XABvi7JtJbQSMAcDwnUnmp2FKDPjg8_tTTFP4BwMSxVdEg
  // Example: https://bg06v2tidkir84hg0s1s4t97jaeoaa1jse1svrad657u070c9calq4g.siasky.net (if opts.fromSubdomain = true)
  // Pass empty object as second param to disable using location as base url
  // when parsing in browser.


  const parsed = (0, _urlParse.default)(skylinkUrl, {});
  const skylinkAndPath = (0, _string.trimSuffix)(parsed.pathname, "/");
  const matchPathname = skylinkAndPath.match(SKYLINK_PATHNAME_REGEX);
  if (!matchPathname) return null;
  const path = matchPathname[SKYLINK_PATH_MATCH_POSITION];
  if (opts.includePath) return (0, _string.trimForwardSlash)(skylinkAndPath);else if (opts.onlyPath) return path;else return matchPathname[SKYLINK_DIRECT_MATCH_POSITION];
}
/**
 * Parses the given string for a base32 skylink.
 *
 * @param skylinkUrl - Base32 skylink.
 * @param [opts] - Additional settings that can optionally be set.
 * @returns - The base32 skylink.
 */


function parseSkylinkBase32(skylinkUrl, opts = {}) {
  // Pass empty object as second param to disable using location as base url
  // when parsing in browser.
  const parsed = (0, _urlParse.default)(skylinkUrl, {}); // Check if the hostname contains a skylink subdomain.

  const matchHostname = parsed.hostname.match(SKYLINK_SUBDOMAIN_REGEX);

  if (matchHostname) {
    if (opts.onlyPath) {
      return (0, _string.trimSuffix)(parsed.pathname, "/");
    }

    return matchHostname[SKYLINK_DIRECT_MATCH_POSITION];
  }

  return null;
}