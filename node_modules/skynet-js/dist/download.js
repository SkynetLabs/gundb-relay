"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.downloadFile = downloadFile;
exports.downloadFileHns = downloadFileHns;
exports.getSkylinkUrl = getSkylinkUrl;
exports.getHnsUrl = getHnsUrl;
exports.getHnsresUrl = getHnsresUrl;
exports.getMetadata = getMetadata;
exports.getFileContent = getFileContent;
exports.getFileContentHns = getFileContentHns;
exports.getFileContentRequest = getFileContentRequest;
exports.openFile = openFile;
exports.openFileHns = openFileHns;
exports.resolveHns = resolveHns;

var _skylink = require("./utils/skylink");

var _string = require("./utils/string");

var _url = require("./utils/url");

const defaultDownloadOptions = { ...(0, _skylink.defaultOptions)("/")
};
const defaultDownloadHnsOptions = { ...(0, _skylink.defaultOptions)("/hns"),
  hnsSubdomain: "hns"
};
const defaultResolveHnsOptions = { ...(0, _skylink.defaultOptions)("/hnsres")
};
/**
 * Initiates a download of the content of the skylink within the browser.
 *
 * @param this - SkynetClient
 * @param skylinkUrl - 46-character skylink, or a valid skylink URL. Can be followed by a path. Note that the skylink will not be encoded, so if your path might contain special characters, consider using `customOptions.path`.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/"] - The relative URL path of the portal endpoint to contact.
 * @returns - The full URL that was used.
 * @throws - Will throw if the skylinkUrl does not contain a skylink or if the path option is not a string.
 */

function downloadFile(skylinkUrl, customOptions) {
  /* istanbul ignore next */
  if (typeof skylinkUrl !== "string") {
    throw new Error("Expected parameter skylinkUrl to be type string, was type ".concat(typeof skylinkUrl));
  }

  const opts = { ...defaultDownloadOptions,
    ...this.customOptions,
    ...customOptions,
    download: true
  };
  const url = this.getSkylinkUrl(skylinkUrl, opts); // Download the url.

  window.location.assign(url);
  return url;
}
/**
 * Initiates a download of the content of the skylink at the Handshake domain.
 *
 * @param this - SkynetClient
 * @param domain - Handshake domain.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/hns"] - The relative URL path of the portal endpoint to contact.
 * @returns - The full URL that was used.
 * @throws - Will throw if the input domain is not a string.
 */


async function downloadFileHns(domain, customOptions) {
  /* istanbul ignore next */
  if (typeof domain !== "string") {
    throw new Error("Expected parameter domain to be type string, was type ".concat(typeof domain));
  }

  const opts = { ...defaultDownloadHnsOptions,
    ...this.customOptions,
    ...customOptions,
    download: true
  };
  const url = this.getHnsUrl(domain, opts); // Download the url.

  window.location.assign(url);
  return url;
}
/**
 * Constructs the full URL for the given skylink.
 *
 * @param this - SkynetClient
 * @param skylinkUrl - Skylink string. See `downloadFile`.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/"] - The relative URL path of the portal endpoint to contact.
 * @returns - The full URL for the skylink.
 * @throws - Will throw if the skylinkUrl does not contain a skylink or if the path option is not a string.
 */


function getSkylinkUrl(skylinkUrl, customOptions) {
  var _opts$query;

  /* istanbul ignore next */
  if (typeof skylinkUrl !== "string") {
    throw new Error("Expected parameter skylinkUrl to be type string, was type ".concat(typeof skylinkUrl));
  }

  const opts = { ...defaultDownloadOptions,
    ...this.customOptions,
    ...customOptions
  };
  const query = (_opts$query = opts.query) !== null && _opts$query !== void 0 ? _opts$query : {};

  if (opts.download) {
    // Set the "attachment" parameter.
    query.attachment = true;
  }

  if (opts.noResponseMetadata) {
    // Set the "no-response-metadata" parameter.
    query["no-response-metadata"] = true;
  } // URL-encode the path.


  let path = "";

  if (opts.path) {
    if (typeof opts.path !== "string") {
      throw new Error("opts.path has to be a string, ".concat(typeof opts.path, " provided"));
    } // Encode each element of the path separately and join them.
    //
    // Don't use encodeURI because it does not encode characters such as '?'
    // etc. These are allowed as filenames on Skynet and should be encoded so
    // they are not treated as URL separators.


    path = opts.path.split("/").map(element => encodeURIComponent(element)).join("/");
  }

  let url;

  if (opts.subdomain) {
    var _parseSkylink;

    // Get the path from the skylink. Use the empty string if not found.
    const skylinkPath = (_parseSkylink = (0, _skylink.parseSkylink)(skylinkUrl, {
      onlyPath: true
    })) !== null && _parseSkylink !== void 0 ? _parseSkylink : ""; // Get just the skylink.

    let skylink = (0, _skylink.parseSkylink)(skylinkUrl);

    if (skylink === null) {
      throw new Error("Could not get skylink out of input '".concat(skylinkUrl, "'"));
    } // Convert the skylink (without the path) to base32.


    skylink = (0, _skylink.convertSkylinkToBase32)(skylink);
    url = (0, _url.addSubdomain)(this.portalUrl, skylink);
    url = (0, _url.makeUrl)(url, skylinkPath, path);
  } else {
    // Get the skylink including the path.
    const skylink = (0, _skylink.parseSkylink)(skylinkUrl, {
      includePath: true
    });

    if (skylink === null) {
      throw new Error("Could not get skylink with path out of input '".concat(skylinkUrl, "'"));
    } // Add additional path if passed in.


    url = (0, _url.makeUrl)(this.portalUrl, opts.endpointPath, skylink, path);
  }

  return (0, _url.addUrlQuery)(url, query);
}
/**
 * Constructs the full URL for the given HNS domain.
 *
 * @param this - SkynetClient
 * @param domain - Handshake domain.
 * @param [customOptions={}] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/hns"] - The relative URL path of the portal endpoint to contact.
 * @returns - The full URL for the HNS domain.
 * @throws - Will throw if the input domain is not a string.
 */


function getHnsUrl(domain, customOptions) {
  var _opts$query2;

  /* istanbul ignore next */
  if (typeof domain !== "string") {
    throw new Error("Expected parameter domain to be type string, was type ".concat(typeof domain));
  }

  const opts = { ...defaultDownloadHnsOptions,
    ...this.customOptions,
    ...customOptions
  };
  const query = (_opts$query2 = opts.query) !== null && _opts$query2 !== void 0 ? _opts$query2 : {};

  if (opts.download) {
    query.attachment = true;
  }

  if (opts.noResponseMetadata) {
    query["no-response-metadata"] = true;
  }

  domain = (0, _string.trimUriPrefix)(domain, _skylink.uriHandshakePrefix);
  const url = opts.subdomain ? (0, _url.addSubdomain)((0, _url.addSubdomain)(this.portalUrl, opts.hnsSubdomain), domain) : (0, _url.makeUrl)(this.portalUrl, opts.endpointPath, domain);
  return (0, _url.addUrlQuery)(url, query);
}
/**
 * Constructs the full URL for the resolver for the given HNS domain.
 *
 * @param this - SkynetClient
 * @param domain - Handshake domain.
 * @param [customOptions={}] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/hnsres"] - The relative URL path of the portal endpoint to contact.
 * @returns - The full URL for the resolver for the HNS domain.
 * @throws - Will throw if the input domain is not a string.
 */


function getHnsresUrl(domain, customOptions) {
  /* istanbul ignore next */
  if (typeof domain !== "string") {
    throw new Error("Expected parameter domain to be type string, was type ".concat(typeof domain));
  }

  const opts = { ...defaultResolveHnsOptions,
    ...this.customOptions,
    ...customOptions
  };
  domain = (0, _string.trimUriPrefix)(domain, _skylink.uriHandshakeResolverPrefix);
  return (0, _url.makeUrl)(this.portalUrl, opts.endpointPath, domain);
}
/**
 * Gets only the metadata for the given skylink without the contents.
 *
 * @param this - SkynetClient
 * @param skylinkUrl - Skylink string. See `downloadFile`.
 * @param [customOptions] - Additional settings that can optionally be set. See `downloadFile` for the full list.
 * @param [customOptions.endpointPath="/"] - The relative URL path of the portal endpoint to contact.
 * @returns - The metadata in JSON format. Empty if no metadata was found.
 * @throws - Will throw if the skylinkUrl does not contain a skylink or if the path option is not a string.
 */


async function getMetadata(skylinkUrl, customOptions) {
  var _response$headers$con, _response$headers$sky;

  /* istanbul ignore next */
  if (typeof skylinkUrl !== "string") {
    throw new Error("Expected parameter skylinkUrl to be type string, was type ".concat(typeof skylinkUrl));
  }

  const opts = { ...defaultDownloadOptions,
    ...this.customOptions,
    ...customOptions
  };
  const url = this.getSkylinkUrl(skylinkUrl, opts);
  const response = await this.executeRequest({ ...opts,
    method: "head",
    url
  });

  if (typeof response.headers === "undefined") {
    throw new Error("Did not get 'headers' in response despite a successful request. Please try again and report this issue to the devs if it persists.");
  }

  const contentType = (_response$headers$con = response.headers["content-type"]) !== null && _response$headers$con !== void 0 ? _response$headers$con : "";
  const metadata = response.headers["skynet-file-metadata"] ? JSON.parse(response.headers["skynet-file-metadata"]) : {};
  const portalUrl = (_response$headers$sky = response.headers["skynet-portal-api"]) !== null && _response$headers$sky !== void 0 ? _response$headers$sky : "";
  const skylink = response.headers["skynet-skylink"] ? (0, _skylink.formatSkylink)(response.headers["skynet-skylink"]) : "";
  return {
    contentType,
    metadata,
    portalUrl,
    skylink
  };
}
/**
 * Gets the contents of the file at the given skylink.
 *
 * @param this - SkynetClient
 * @param skylinkUrl - Skylink string. See `downloadFile`.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/"] - The relative URL path of the portal endpoint to contact.
 * @returns - An object containing the data of the file, the content-type, metadata, and the file's skylink.
 * @throws - Will throw if the skylinkUrl does not contain a skylink or if the path option is not a string.
 */


async function getFileContent(skylinkUrl, customOptions) {
  /* istanbul ignore next */
  if (typeof skylinkUrl !== "string") {
    throw new Error("Expected parameter skylinkUrl to be type string, was type ".concat(typeof skylinkUrl));
  }

  const opts = { ...defaultDownloadOptions,
    ...this.customOptions,
    ...customOptions
  };
  const url = this.getSkylinkUrl(skylinkUrl, opts);
  return this.getFileContentRequest(url, opts);
}
/**
 * Gets the contents of the file at the given Handshake domain.
 *
 * @param this - SkynetClient
 * @param domain - Handshake domain.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/hns"] - The relative URL path of the portal endpoint to contact.
 * @returns - An object containing the data of the file, the content-type, metadata, and the file's skylink.
 * @throws - Will throw if the domain does not contain a skylink.
 */


async function getFileContentHns(domain, customOptions) {
  const opts = { ...defaultDownloadHnsOptions,
    ...this.customOptions,
    ...customOptions
  };
  const url = this.getHnsUrl(domain, opts);
  return this.getFileContentRequest(url, opts);
}
/**
 * Does a GET request of the skylink, returning the data property of the response.
 *
 * @param this - SkynetClient
 * @param url - URL.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @returns - An object containing the data of the file, the content-type, metadata, and the file's skylink.
 * @throws - Will throw if the request does not succeed or the response is missing data.
 */


async function getFileContentRequest(url, customOptions) {
  var _response$headers$con2, _response$headers$sky2;

  const opts = { ...defaultDownloadOptions,
    ...this.customOptions,
    ...customOptions
  }; // GET request the data at the skylink.

  const response = await this.executeRequest({ ...opts,
    method: "get",
    url
  });

  if (typeof response.data === "undefined") {
    throw new Error("Did not get 'data' in response despite a successful request. Please try again and report this issue to the devs if it persists.");
  }

  if (typeof response.headers === "undefined") {
    throw new Error("Did not get 'headers' in response despite a successful request. Please try again and report this issue to the devs if it persists.");
  }

  const contentType = (_response$headers$con2 = response.headers["content-type"]) !== null && _response$headers$con2 !== void 0 ? _response$headers$con2 : "";
  const metadata = response.headers["skynet-file-metadata"] ? JSON.parse(response.headers["skynet-file-metadata"]) : {};
  const portalUrl = (_response$headers$sky2 = response.headers["skynet-portal-api"]) !== null && _response$headers$sky2 !== void 0 ? _response$headers$sky2 : "";
  const skylink = response.headers["skynet-skylink"] ? (0, _skylink.formatSkylink)(response.headers["skynet-skylink"]) : "";
  return {
    data: response.data,
    contentType,
    portalUrl,
    metadata,
    skylink
  };
}
/**
 * Opens the content of the skylink within the browser.
 *
 * @param this - SkynetClient
 * @param skylinkUrl - Skylink string. See `downloadFile`.
 * @param [customOptions] - Additional settings that can optionally be set. See `downloadFile` for the full list.
 * @param [customOptions.endpointPath="/"] - The relative URL path of the portal endpoint to contact.
 * @returns - The full URL that was used.
 * @throws - Will throw if the skylinkUrl does not contain a skylink or if the path option is not a string.
 */


function openFile(skylinkUrl, customOptions) {
  /* istanbul ignore next */
  if (typeof skylinkUrl !== "string") {
    throw new Error("Expected parameter skylinkUrl to be type string, was type ".concat(typeof skylinkUrl));
  }

  const opts = { ...defaultDownloadOptions,
    ...this.customOptions,
    ...customOptions
  };
  const url = this.getSkylinkUrl(skylinkUrl, opts);
  window.open(url, "_blank");
  return url;
}
/**
 * Opens the content of the skylink from the given Handshake domain within the browser.
 *
 * @param this - SkynetClient
 * @param domain - Handshake domain.
 * @param [customOptions] - Additional settings that can optionally be set. See `downloadFileHns` for the full list.
 * @param [customOptions.endpointPath="/hns"] - The relative URL path of the portal endpoint to contact.
 * @returns - The full URL that was used.
 * @throws - Will throw if the input domain is not a string.
 */


async function openFileHns(domain, customOptions) {
  /* istanbul ignore next */
  if (typeof domain !== "string") {
    throw new Error("Expected parameter domain to be type string, was type ".concat(typeof domain));
  }

  const opts = { ...defaultDownloadHnsOptions,
    ...this.customOptions,
    ...customOptions
  };
  const url = this.getHnsUrl(domain, opts); // Open the url in a new tab.

  window.open(url, "_blank");
  return url;
}
/**
 * Resolves the given HNS domain to its TXT record and returns the data.
 *
 * @param this - SkynetClient
 * @param domain - Handshake resolver domain.
 * @param [customOptions={}] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/hnsres"] - The relative URL path of the portal endpoint to contact.
 * @returns - The data for the TXT record.
 * @throws - Will throw if the input domain is not a string.
 */


async function resolveHns(domain, customOptions) {
  /* istanbul ignore next */
  if (typeof domain !== "string") {
    throw new Error("Expected parameter domain to be type string, was type ".concat(typeof domain));
  }

  const opts = { ...defaultResolveHnsOptions,
    ...this.customOptions,
    ...customOptions
  };
  const url = this.getHnsresUrl(domain, opts); // Get the txt record from the hnsres domain on the portal.

  const response = await this.executeRequest({ ...opts,
    method: "get",
    url
  });
  return response.data;
}